=C语言中的格式化字符串=

==一个Warning==
写程序多少作者都会有些洁癖，我平时用Gcc编译，加-Wall参数。不单是Error，Warning也是应该消除的。除非你知道那个Waring对于你的程序无害，不过通常都会在某些情况下给你带来麻烦，所以我不喜欢看到Warning。

今天写了一段代码，在POJ上只能用C++编译，其他编译器都报错。这是另一个问题，不过格式化字符串问题是从这个程序引申出来的，先来看看这段小程序：

    #include <cstdio>
    #include <cmath>

    int main(int argc, char *argv[])
    {
        double n, m;
    
        while (scanf("%lf %lf", &m, &n) != EOF)
            printf("%.0lf\n", exp(log(n)/m));   
    
        return 0;
    }
    
程序中的n和m两个变量均为double，相对于float精度更高，占用的二进制位也更多。在scanf和printf两个函数中，的一个参数都是用来格式化的字符串，里面用一些占位符预先给变量占位置。

对于浮点型变量来说，通常的占位符是“%f”。如果这样去写，printf中的占位符会被正确识别，而scanf中的占位符会报一个Warning，内容是double与%f的占位符类型不匹配。

如果我把所有占位符都换为%lf，这个Warning就不会出现，所以我认为这是个好方法。

==是否符合标准==
今天发布这篇有困惑的代码时，张同学说%lf这样的占位符不是标准的一部分，可能影响代码在不同编译器和平台间的移植性。

说实话，不是每个人写程序的时候都会考虑移植性的，因为很少有人有钱弄两个不同的系统结构，我指你想保护知识产权地使用正版Windows。所以能想到移植性是负责任的表现。

标准对于C语言的移植太关键了，因为C语言过于灵活。你可以将一个语句分为很多行，也可以在一行中写多个语句。可以用结构体组成复杂的数据类型，也可以给数据类型换名字，还可以操纵整型变量的某一个二进制位。要想写个别人看着费点劲才能看懂的程序真不难。

我所知的C标准就是C99了，是ISO制定出来的。所以就到某网站下载了这个标准文档，开始翻这部分，还好有Ctrl+F帮助我。

==函数原形==
print和scanf两个常用函数分别与stdin和stdout交换数据。对于这两个函数，标准中有如下说明：

    The printf function is equivalent to fprintf with the argument stdout interposed before the arguments to printf.

    The scanf function is equivalent to fscanf with the argument stdin interposed before the arguments to scanf.

printf原形是fprintf，第一个参数为stdout；
scanf原形是fscanf，第一个参数为stdin。

但都没有提到%lf的问题。

==直接搜索lf==
后来就直接搜索了%lf，找到这样一句：

    %lf conversion specifier allowed in printf

说明%lf在C99标准中是可以用在printf中的。标准中将%lf这类的占位符叫做：conversion specifier。然后又开始以这个作为搜索的目标，找到如下一段说明，大体概括了浮点型变量的相关占位符类型。

    f,F
    A double argument representing a floating-point number is converted to decimal notation in the style [−]ddd.ddd, where the number of digits after the decimal-point character is equal to the precision specification. If the precision is missing, it is taken as 6; if the precision is zero and the # flag is not specified, no decimal-point character appears. If a decimal-point character appears, at least one digit appears before it. The value is rounded to the appropriate number of digits.

    e,E
    A double argument representing a floating-point number is converted in the style [−]d.ddd e±dd, where there is one digit (which is nonzero if the argument is nonzero) before the decimal-point character and the number of digits after it is equal to the precision; if the precision is missing, it is taken as 6; if the precision is zero and the # flag is not specified, no decimal-point character appears. The value is rounded to the appropriate number of digits.  The E conversion specifier produces a number with E instead of e introducing the exponent. The exponent always contains at least two digits, and only as many more digits as necessary to represent the exponent. If the value is zero, the exponent is zero.

    g,G
    A double argument representing a floating-point number is converted in style f or e (or in style F or E in the case of a G conversion specifier), with the precision specifying the number of significant digits. If the precision is zero, it is taken as 1. The style used depends on the value converted; style e (or E) is used only if the exponent resulting from such a conversion is less than −4 or greater than or equal to the precision. Trailing zeros are removed from the fractional portion of the result unless the # flag is specified; a decimal-point character appears only if it is followed by a digit.

可见标准中并没有单独提出lf的定义，应该是一种为了兼容而产生的。

==一些联想==
printf中的%f可以被正确识别，而scanf中若用%f存入double类型，gcc会负责任的给你一个Warning。

搜索了一些国外的论坛，说float和double虽然都是浮点型，但是占用的字节数不同。在scanf中，传入的变量是变量地址，scanf无法确定究竟应该用多少个字节保存这个浮点值。而printf中传入的是变量本身，就可以确定变量类型，所以%f作用就仅仅是个占位符而已。

联想到malloc和free函数，malloc只根据size向系统申请指定大小的内存，返回值是一个void的指针。从指针本身和指针类型来说，是不会携带内存大小信息的。但是free函数只需要这个指针就知道释放多少内存，所以底层上这个指针还是应该携带了内存大小的信息的。

如果是这样的话，那么scanf不知道地址所指向内存大小的说法就不成立。记得常亮童鞋在TJLUG活动时提到侯捷老师剖析数据类型的讲座，有个叫cookie的底层结构，记录一些变量信息。

如杨老师所说，我们应该深入底层，获得更大自由，提升到更高的抽象层次。
